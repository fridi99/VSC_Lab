/*
 * Metering Point API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MeteringPoint : IEquatable<MeteringPoint>
    { 
        /// <summary>
        /// Gets or Sets MeteringPointNumber
        /// </summary>
        [Required]

        [DataMember(Name="meteringPointNumber")]
        public Object MeteringPointNumber { get; set; }
        
        /// <summary>
        /// Gets or Sets MeterReading
        /// </summary>
        [Required]
        
        [DataMember(Name="meterReading")]
        public Object MeterReading { get; set; }
        
        /// <summary>
        /// Gets or Sets OperatingState
        /// </summary>
        [Required]
        
        [DataMember(Name="operatingState")]
        public Object OperatingState { get; set; }
        
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [Required]
        
        [DataMember(Name="timestamp")]
        public Object Timestamp { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MeteringPoint {\n");
            sb.Append("  MeteringPointNumber: ").Append(MeteringPointNumber).Append("\n");
            sb.Append("  MeterReading: ").Append(MeterReading).Append("\n");
            sb.Append("  OperatingState: ").Append(OperatingState).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MeteringPoint)obj);
        }

        /// <summary>
        /// Returns true if MeteringPoint instances are equal
        /// </summary>
        /// <param name="other">Instance of MeteringPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MeteringPoint other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MeteringPointNumber == other.MeteringPointNumber ||
                    MeteringPointNumber != null &&
                    MeteringPointNumber.Equals(other.MeteringPointNumber)
                ) && 
                (
                    MeterReading == other.MeterReading ||
                    MeterReading != null &&
                    MeterReading.Equals(other.MeterReading)
                ) && 
                (
                    OperatingState == other.OperatingState ||
                    OperatingState != null &&
                    OperatingState.Equals(other.OperatingState)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MeteringPointNumber != null)
                    hashCode = hashCode * 59 + MeteringPointNumber.GetHashCode();
                    if (MeterReading != null)
                    hashCode = hashCode * 59 + MeterReading.GetHashCode();
                    if (OperatingState != null)
                    hashCode = hashCode * 59 + OperatingState.GetHashCode();
                    if (Timestamp != null) 
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MeteringPoint left, MeteringPoint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MeteringPoint left, MeteringPoint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
